#+TITLE: Spacemacs Configuration

* Configuration layers
  You should not put any user code in this function besides modifying the variable values.
  #+BEGIN_SRC emacs-lisp
    (defun dotspacemacs/layers ()
      (setq-default
       ;; Base distribution to use. This is a layer contained in the directory
       ;; `+distribution'. For now available distributions are `spacemacs-base'
       ;; or `spacemacs'. (default 'spacemacs)
       dotspacemacs-distribution 'spacemacs
       ;; Lazy installation of layers (i.e. layers are installed only when a file
       ;; with a supported type is opened). Possible values are `all', `unused'
       ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
       ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
       ;; lazy install any layer that support lazy installation even the layers
       ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
       ;; installation feature and you have to explicitly list a layer in the
       ;; variable `dotspacemacs-configuration-layers' to install it.
       ;; (default 'unused)
       dotspacemacs-enable-lazy-installation 'unused
       ;; If non-nil then Spacemacs will ask for confirmation before installing
       ;; a layer lazily. (default t)
       dotspacemacs-ask-for-lazy-installation t
       ;; If non-nil layers with lazy install support are lazy installed.
       ;; List of additional paths where to look for configuration layers.
       ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
       dotspacemacs-configuration-layer-path '()
       ;; List of configuration layers to load.
       dotspacemacs-configuration-layers
       '(
         markdown
         helm
         semantic
         (c-c++ :variables
                c-c++-enable-clang-support t
                c-c++-default-mode-for-headers 'c++-mode)
         shaders
         rust
         python
         java
         (haskell :variables
                  haskell-enable-indent-style "fundamental")
         (syntax-checking :enabled-for
                          c-c++
                          rust
                          haskell
                          java
                          python)

         (auto-completion :enabled-for
                          c-c++
                          rust
                          haskell
                          java
                          python
                          :variables
                          auto-completion-return-key-behavior nil
                          auto-completion-tab-key-behavior 'cycle
                          auto-completion-enable-help-tooltip 'manual)
         emacs-lisp
         version-control
         git
         org
         ;;asciidoc
         html
         ;; (shell :variables
         ;;        shell-default-height 30
         ;;        shell-default-position 'bottom)
         ;; spell-checking
         )
       ;; List of additional packages that will be installed without being
       ;; wrapped in a layer. If you need some configuration for these
       ;; packages, then consider creating a layer. You can also put the
       ;; configuration in `dotspacemacs/user-config'.
       dotspacemacs-additional-packages
       '(
         smart-tabs-mode
         rtags
         helm-rtags
         )
       ;; A list of packages that cannot be updated.
       dotspacemacs-frozen-packages '()
       ;; A list of packages that will not be installed and loaded.
       dotspacemacs-excluded-packages '()
       ;; Defines the behaviour of Spacemacs when installing packages.
       ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
       ;; `used-only' installs only explicitly used packages and uninstall any
       ;; unused packages as well as their unused dependencies.
       ;; `used-but-keep-unused' installs only the used packages but won't uninstall
       ;; them if they become unused. `all' installs *all* packages supported by
       ;; Spacemacs and never uninstall them. (default is `used-only')
       dotspacemacs-install-packages 'used-only))
#+END_SRC

* Initialization
  This function is called at the very startup of Spacemacs initialization
  before layers configuration. You should not put any user code in there
  besides modifying the variable values.
  #+BEGIN_SRC emacs-lisp
    (defun dotspacemacs/init ()
      ;; This setq-default sexp is an exhaustive list of all the supported
      ;; spacemacs settings.
      (setq-default
       ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
       ;; possible. Set it to nil if you have no way to use HTTPS in your
       ;; environment, otherwise it is strongly recommended to let it set to t.
       ;; This variable has no effect if Emacs is launched with the parameter
       ;; `--insecure' which forces the value of this variable to nil.
       ;; (default t)
       dotspacemacs-elpa-https t
       ;; Maximum allowed time in seconds to contact an ELPA repository.
       dotspacemacs-elpa-timeout 5
       ;; If non nil then spacemacs will check for updates at startup
       ;; when the current branch is not `develop'. Note that checking for
       ;; new versions works via git commands, thus it calls GitHub services
       ;; whenever you start Emacs. (default nil)
       dotspacemacs-check-for-update nil
       ;; If non-nil, a form that evaluates to a package directory. For example, to
       ;; use different package directories for different Emacs versions, set this
       ;; to `emacs-version'.
       dotspacemacs-elpa-subdirectory nil
       ;; One of `vim', `emacs' or `hybrid'.
       ;; `hybrid' is like `vim' except that `insert state' is replaced by the
       ;; `hybrid st n nate' with `emacs' key bindings. The value can also be a list
       ;; with `:variables' keyword (similar to layers). Check the editing styles
       ;; section of the documentation for details on available variables.
       ;; (default 'vim)
       dotspacemacs-editing-style 'vim
       ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
       dotspacemacs-verbose-loading nil
       ;; Specify the startup banner. Default value is `official', it displays
       ;; the official spacemacs logo. An integer value is the index of text
       ;; banner, `random' chooses a random text banner in `core/banners'
       ;; directory. A string value must be a path to an image format supported
       ;; by your Emacs build.
       ;; If the value is nil then no banner is displayed. (default 'official)
       dotspacemacs-startup-banner 'official
       ;; List of items to show in startup buffer or an association list of
       ;; the form `(list-type . list-size)`. If nil then it is disabled.
       ;; Possible values for list-type are:
       ;; `recents' `bookmarks' `projects' `agenda' `todos'."
       ;; List sizes may be nil, in which case
       ;; `spacemacs-buffer-startup-lists-length' takes effect.
       dotspacemacs-startup-lists '((recents . 5)
                                    (projects . 7))
       ;; True if the home buffer should respond to resize events.
       dotspacemacs-startup-buffer-responsive t
       ;; Default major mode of the scratch buffer (default `text-mode')
       dotspacemacs-scratch-mode 'text-mode
       ;; List of themes, the first of the list is loaded when spacemacs starts.
       ;; Press <SPC> T n to cycle to the next theme in the list (works great
       ;; with 2 themes variants, one dark and one light)
       dotspacemacs-themes '(spacemacs-dark
                             spacemacs-light
                             monokai)
       ;; If non nil the cursor color matches the state color in GUI Emacs.
       dotspacemacs-colorize-cursor-according-to-state t
       ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
       ;; quickly tweak the mode-line size to make separators look not too crappy.
       dotspacemacs-default-font '("Terminus"
                                   :size 12
                                   :weight normal
                                   :width normal
                                   :powerline-scale 1.5)
       ;; The leader key
       dotspacemacs-leader-key "SPC"
       ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
       ;; (default "SPC")
       dotspacemacs-emacs-command-key "SPC"
       ;; The key used for Vim Ex commands (default ":")
       dotspacemacs-ex-command-key ":"
       ;; The leader key accessible in `emacs state' and `insert state'
       ;; (default "M-m")
       dotspacemacs-emacs-leader-key "M-m"
       ;; Major mode leader key is a shortcut key which is the equivalent of
       ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
       dotspacemacs-major-mode-leader-key ","
       ;; Major mode leader key accessible in `emacs state' and `insert state'.
       ;; (default "C-M-m")
       dotspacemacs-major-mode-emacs-leader-key "C-M-m"
       ;; These variables control whether separate commands are bound in the GUI to
       ;; the key pairs C-i, TAB and C-m, RET.
       ;; Setting it to a non-nil value, allows for separate commands under <C-i>
       ;; and TAB or <C-m> and RET.
       ;; In the terminal, these pairs are generally indistinguishable, so this only
       ;; works in the GUI. (default nil)
       dotspacemacs-distinguish-gui-tab nil
       ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
       dotspacemacs-remap-Y-to-y$ nil
       ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
       ;; there. (default t)
       dotspacemacs-retain-visual-state-on-shift t
       ;; If non-nil, J and K move lines up and down when in visual mode.
       ;; (default nil)
       dotspacemacs-visual-line-move-text nil
       ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
       ;; (default nil)
       dotspacemacs-ex-substitute-global nil
       ;; Name of the default layout (default "Default")
       dotspacemacs-default-layout-name "Default"
       ;; If non nil the default layout name is displayed in the mode-line.
       ;; (default nil)
       dotspacemacs-display-default-layout nil
       ;; If non nil then the last auto saved layouts are resume automatically upon
       ;; start. (default nil)
       dotspacemacs-auto-resume-layouts nil
       ;; Size (in MB) above which spacemacs will prompt to open the large file
       ;; literally to avoid performance issues. Opening a file literally means that
       ;; no major mode or minor modes are active. (default is 1)
       dotspacemacs-large-file-size 1
       ;; Location where to auto-save files. Possible values are `original' to
       ;; auto-save the file in-place, `cache' to auto-save the file to another
       ;; file stored in the cache directory and `nil' to disable auto-saving.
       ;; (default 'cache)
       dotspacemacs-auto-save-file-location 'cache
       ;; Maximum number of rollback slots to keep in the cache. (default 5)
       dotspacemacs-max-rollback-slots 5
       ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
       dotspacemacs-helm-resize nil
       ;; if non nil, the helm header is hidden when there is only one source.
       ;; (default nil)
       dotspacemacs-helm-no-header nil
       ;; define the position to display `helm', options are `bottom', `top',
       ;; `left', or `right'. (default 'bottom)
       dotspacemacs-helm-position 'bottom
       ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
       ;; in all non-asynchronous sources. If set to `source', preserve individual
       ;; source settings. Else, disable fuzzy matching in all sources.
       ;; (default 'always)
       dotspacemacs-helm-use-fuzzy 'always
       ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
       ;; several times cycle between the kill ring content. (default nil)
       dotspacemacs-enable-paste-transient-state nil
       ;; Which-key delay in seconds. The which-key buffer is the popup listing
       ;; the commands bound to the current keystroke sequence. (default 0.4)
       dotspacemacs-which-key-delay 0.4
       ;; Which-key frame position. Possible values are `right', `bottom' and
       ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
       ;; right; if there is insufficient space it displays it at the bottom.
       ;; (default 'bottom)
       dotspacemacs-which-key-position 'bottom
       ;; If non nil a progress bar is displayed when spacemacs is loading. This
       ;; may increase the boot time on some systems and emacs builds, set it to
       ;; nil to boost the loading time. (default t)
       dotspacemacs-loading-progress-bar t
       ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
       ;; (Emacs 24.4+ only)
       dotspacemacs-fullscreen-at-startup nil
       ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
       ;; Use to disable fullscreen animations in OSX. (default nil)
       dotspacemacs-fullscreen-use-non-native nil
       ;; If non nil the frame is maximized when Emacs starts up.
       ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
       ;; (default nil) (Emacs 24.4+ only)
       dotspacemacs-maximized-at-startup nil
       ;; A value from the range (0..100), in increasing opacity, which describes
       ;; the transparency level of a frame when it's active or selected.
       ;; Transparency can be toggled through `toggle-transparency'. (default 90)
       dotspacemacs-active-transparency 90
       ;; A value from the range (0..100), in increasing opacity, which describes
       ;; the transparency level of a frame when it's inactive or deselected.
       ;; Transparency can be toggled through `toggle-transparency'. (default 90)
       dotspacemacs-inactive-transparency 90
       ;; If non nil show the titles of transient states. (default t)
       dotspacemacs-show-transient-state-title t
       ;; If non nil show the color guide hint for transient state keys. (default t)
       dotspacemacs-show-transient-state-color-guide t
       ;; If non nil unicode symbols are displayed in the mode line. (default t)
       dotspacemacs-mode-line-unicode-symbols t
       ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
       ;; scrolling overrides the default behavior of Emacs which recenters point
       ;; when it reaches the top or bottom of the screen. (default t)
       dotspacemacs-smooth-scrolling t
       ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
       ;; derivatives. If set to `relative', also turns on relative line numbers.
       ;; (default nil)
       dotspacemacs-line-numbers 'relative
       ;; Code folding method. Possible values are `evil' and `origami'.
       ;; (default 'evil)
       dotspacemacs-folding-method 'evil
       ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
       ;; (default nil)
       dotspacemacs-smartparens-strict-mode nil
       ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
       ;; over any automatically added closing parenthesis, bracket, quote, etc…
       ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
       dotspacemacs-smart-closing-parenthesis t
       ;; Select a scope to highlight delimiters. Possible values are `any',
       ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
       ;; emphasis the current one). (default 'all)
       dotspacemacs-highlight-delimiters 'all
       ;; If non nil, advise quit functions to keep server open when quitting.
       ;; (default nil)
       dotspacemacs-persistent-server nil
       ;; List of search tool executable names. Spacemacs uses the first installed
       ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
       ;; (default '("ag" "pt" "ack" "grep"))
       dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
       ;; The default package repository used if no explicit repository has been
       ;; specified with an installed package.
       ;; Not used for now. (default nil)
       dotspacemacs-default-package-repository nil
       ;; Delete whitespace while saving buffer. Possible values are `all'
       ;; to aggressively delete empty line and long sequences of whitespace,
       ;; `trailing' to delete only the whitespace at end of lines, `changed'to
       ;; delete only whitespace for changed lines or `nil' to disable cleanup.
       ;; (default nil)
       dotspacemacs-whitespace-cleanup nil
       ))
  #+END_SRC

* User initialization
  Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before layer configuration
  executes.
  This function is mostly useful for variables that need to be set
  before packages are loaded. If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first.
  #+BEGIN_SRC emacs-lisp
    (defun dotspacemacs/user-init ())
  #+END_SRC

* C/C++ Programming
** Google Code Style
   #+BEGIN_SRC emacs-lisp
     ;; TODO replace with "add"
     ;; Wrapper function needed for Emacs 21 and XEmacs (Emacs 22 offers the more
     ;; elegant solution of composing a list of lineup functions or quantities with
     ;; operators such as "add")
     (defun vtec234/google-c-lineup-expression-plus-4 (langelem)
       "Indents to the beginning of the current C expression plus 4 spaces.
     This implements title \"Function Declarations and Definitions\"
     of the Google C++ Style Guide for the case where the previous
     line ends with an open parenthese.
     \"Current C expression\", as per the Google Style Guide and as
     clarified by subsequent discussions, means the whole expression
     regardless of the number of nested parentheses, but excluding
     non-expression material such as \"if(\" and \"for(\" control
     structures.
     Suitable for inclusion in `c-offsets-alist'."
       (save-excursion
         (back-to-indentation)
         ;; Go to beginning of *previous* line:
         (c-backward-syntactic-ws)
         (back-to-indentation)
         (cond
          ;; We are making a reasonable assumption that if there is a control
          ;; structure to indent past, it has to be at the beginning of the line.
          ((looking-at "\\(\\(if\\|for\\|while\\)\\s *(\\)")
           (goto-char (match-end 1)))
          ;; For constructor initializer lists, the reference point for line-up is
          ;; the token after the initial colon.
          ((looking-at ":\\s *")
           (goto-char (match-end 0))))
         (vector (+ 4 (current-column)))))

     (defconst vtec234/google-c-style
       `((c-recognize-knr-p . nil)
         (c-enable-xemacs-performance-kludge-p . t) ; speed up indentation in XEmacs
         (c-basic-offset . 2)
         (indent-tabs-mode . nil)
         (c-tab-always-indent . t)
         (c-comment-only-line-offset . 0)
         (c-hanging-braces-alist . ((defun-open after)
                                    (defun-close before after)
                                    (class-open after)
                                    (class-close before after)
                                    (inexpr-class-open after)
                                    (inexpr-class-close before)
                                    (namespace-open after)
                                    (inline-open after)
                                    (inline-close before after)
                                    (block-open after)
                                    (block-close . c-snug-do-while)
                                    (extern-lang-open after)
                                    (extern-lang-close after)
                                    (statement-case-open after)
                                    (substatement-open after)))
         (c-hanging-colons-alist . ((case-label)
                                    (label after)
                                    (access-label after)
                                    (member-init-intro before)
                                    (inher-intro)))
         (c-hanging-semi&comma-criteria
          . (c-semi&comma-no-newlines-for-oneline-inliners
             c-semi&comma-inside-parenlist
             c-semi&comma-no-newlines-before-nonblanks))
         (c-indent-comments-syntactically-p . t)
         (comment-column . 40)
         (c-indent-comment-alist . ((other . (space . 2))))
         (c-cleanup-list . (brace-else-brace
                            brace-elseif-brace
                            brace-catch-brace
                            empty-defun-braces
                            defun-close-semi
                            list-close-comma
                            scope-operator))
         (c-offsets-alist . ((arglist-intro vtec234/google-c-lineup-expression-plus-4)
                             (func-decl-cont . ++)
                             (member-init-intro . ++)
                             (inher-intro . ++)
                             (comment-intro . 0)
                             (arglist-close . c-lineup-arglist)
                             (topmost-intro . 0)
                             (block-open . 0)
                             (inline-open . 0)
                             (substatement-open . 0)
                             (statement-cont
                              .
                              (,(when (fboundp 'c-no-indent-after-java-annotations)
                                  'c-no-indent-after-java-annotations)
                               ,(when (fboundp 'c-lineup-assignments)
                                  'c-lineup-assignments)
                               ++))
                             (label . /)
                             (case-label . +)
                             (statement-case-open . +)
                             (statement-case-intro . +) ; case w/o {
                             (access-label . /)
                             (innamespace . 0))))
       "Google C/C++ Programming Style")
   #+END_SRC
   
** SFTTech Code Style
   #+BEGIN_SRC emacs-lisp
     (defconst vtec234/sft-c-style
       '("linux"  ;; base it on linux code style
         (c-doc-comment-style        . javadoc)
         (indent-tabs-mode           . t)
         (c-basic-offset             . 4)
         (c-tab-always-indent        . t)
         (c-comment-only-line-offset . 4)
         (c-hanging-braces-alist     . (
                                        (brace-list-open)
                                        (substatement-open after)
                                        ))
         (c-hanging-colons-alist     . (
                                        (access-label after)
                                        (case-label after)
                                        (inher-intro)
                                        (label after)
                                        (member-init-intro before)
                                        ))
         (c-cleanup-list             . (
                                        scope-operator
                                        empty-defun-braces
                                        defun-close-semi
                                        ))
         (c-comment-only-line-offset . 0)
         (c-hanging-braces-alist . (
                                    (arglist-cont-nonempty)
                                    (block-close . c-snug-do-while)
                                    (brace-entry-open)
                                    (brace-list-open)
                                    (substatement-open before after)
                                    ))
         (c-cleanup-list . (brace-else-brace))
         (c-offsets-alist . (
                                             ; arg indent helper funcs: c-lineup-*
                                             ; arglist = indent to matching (|here, asdf
                                             ; argcont = indent to (asdf, |here
                                             ; casecaded calls = ->lol\n->stuff
                                             ; absolute offset: [0]
                             (access-label          . -)   ; public: or private:
                             (arglist-intro         . +)   ; first arg in newline
                             (arglist-cont          . 0)   ; wrapped function args: func(\nthisone
                                             ; wrapped function args after func(arg,\nthisone:
                             (arglist-cont-nonempty . (max c-lineup-arglist
                                                           c-lineup-string-cont
                                                           c-lineup-cascaded-calls))
                             (arglist-close         . 0)   ; intentation of ) which closes tabbed args
                             (block-open            . 0)   ; { to open a block
                             (block-close           . 0)   ; } after a block
                             (brace-list-intro      . +)   ; first element in {\nthisone
                             (brace-list-entry      . 0)   ; other elements in {\nelem\nthisone
                             (case-label            . 0)   ; case 1337:
                             (statement-case-open   . 0)   ; { after case 1337:
                             (statement-case-intro  . +)   ; code after case 1337:
                             (defun-block-intro     . +)   ; beginning of keyword (...) { stuff  }
                             (inclass               . +)   ; members of struct or class
                             (inher-intro           . +)   ; beginning of inheritance def
                             (inher-cont            . c-lineup-multi-inher)   ; inheritance continuation
                             (inline-open           . +)
                             (innamespace           . 0)   ; namespace lol {\nthisstatement
                             (knr-argdecl-intro     . -)
                             (knr-argdecl-intro     . 0)
                             (label                 . 0)   ; gotolabel:
                             (member-init-intro     . +)   ; member initializing for class lol : var(val)
                             (member-init-cont      . c-lineup-multi-inher)   ; further members
                             (statement             . 0)
                             (statement-block-intro . +)   ; line in if () {\nthisline
                             (statement-case-open   . +)
                             (statement-cont        . (max c-lineup-assignments c-lineup-cascaded-calls c-lineup-string-cont))
                             (substatement          . +)
                             (substatement-label    . 0)
                             (substatement-open     . 0)
                             (substatement-open     . 0)
                             (template-args-cont    . c-lineup-template-args)
                             (topmost-intro         . 0)   ; indentation of file start
                             (topmost-intro-cont    . c-lineup-topmost-intro-cont)
                             (cpp-macro             . [0])   ; #define, etcetc
                             ))

         ;; information about indent parsing on TAB
         ;; this is also triggered by C-c C-s
         (c-echo-syntactic-information-p . nil))
       "The SFTTech C/C++ Programming Style")
   #+END_SRC
   
** RTags integration
   #+BEGIN_SRC emacs-lisp
     (defun vtec234/init-rtags ()
       (evil-leader/set-key-for-mode 'c++-mode "oo" 'rtags-find-symbol-at-point)
       (evil-leader/set-key-for-mode 'c++-mode "os" 'rtags-find-symbol)
       (evil-leader/set-key-for-mode 'c++-mode "or" 'rtags-rename-symbol)
       (evil-leader/set-key-for-mode 'c++-mode "of" 'rtags-find-references-at-point)
       (evil-leader/set-key-for-mode 'c++-mode "oF" 'rtags-find-references)
       (evil-leader/set-key-for-mode 'c++-mode "ov" 'rtags-find-virtuals-at-point)
       (evil-leader/set-key-for-mode 'c++-mode "ot" 'rtags-symbol-type)
       (evil-leader/set-key-for-mode 'c++-mode "o," 'rtags-location-stack-back)
       (evil-leader/set-key-for-mode 'c++-mode "o." 'rtags-location-stack-forward)
       (add-hook 'rtags-jump-hook 'evil-set-jump))
   #+END_SRC
   
** Language hook
   #+BEGIN_SRC emacs-lisp
     (defun vtec234/c-common-hook ()
       (c-add-style "sft" vtec234/sft-c-style)
       (c-add-style "google" vtec234/google-c-style)

       (c-toggle-auto-newline nil) ; no automatic
       (c-toggle-auto-state nil)   ; newlines

       (smart-tabs-advice c-indent-line c-basic-offset)
       (smart-tabs-advice c-indent-region c-basic-offset)
       (smart-tabs-insinuate 'c 'c++)

       (vtec234/init-rtags))

     (defun vtec234/init-c ()
       (add-hook 'c-mode-common-hook 'vtec234/c-common-hook))
   #+END_SRC
   
* Java Programming
  #+BEGIN_SRC emacs-lisp
    (defun vtec234/java-hook ()
      (setq eclim-eclipse-dirs "~/.local/eclipse"
            eclim-executable "~/.local/eclipse/eclim"
            eclimd-default-workspace "~/Programming/Java"))

    (defun vtec234/init-java ()
      (add-hook 'java-mode-hook 'vtec234/java-hook))
  #+END_SRC

* Org-mode programming
  #+BEGIN_SRC emacs-lisp
    (defun vtec234/org-mode-hook()
      (require 'ob-ditaa)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((ditaa . t)
         (C . t)
         (shell . t)))
      (unless (boundp 'vtec234/org-mode-hook-ran)
        (setq org-babel-exp-code-template
              (concat "〈 \/%name\/ 〉 ≡\n" org-babel-exp-code-template))
        (setq vtec234/org-mode-hook-ran t)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (defun vtec234/init-org-mode ()
      (add-hook 'org-mode-hook 'vtec234/org-mode-hook))
  #+END_SRC

* User configuration
  Configuration function for user code.
  This function is called at the very end of Spacemacs initialization after
  layers configuration.
  This is the place where most of your configurations should be done. Unless it is
  explicitly specified that a variable should be set before a package is loaded,
  you should place your code here.
  #+BEGIN_SRC emacs-lisp
    (defun dotspacemacs/user-config ()
      (setq powerline-default-separator 'slant)
      (evil-define-key 'visual evil-surround-mode-map "s" 'evil-substitute)
      (evil-define-key 'visual evil-surround-mode-map "S" 'evil-surround-region)
      (set-mouse-color "white")
      (vtec234/init-c)
      (vtec234/init-java)
      (vtec234/init-org-mode)

      ;; TODO move this
      (add-to-list 'auto-mode-alist (cons "\\.asciidoc\\'" 'adoc-mode)))
  #+END_SRC

* Check
  This variable is defined on successful loading of this file.
  #+BEGIN_SRC emacs-lisp
    (defvar vtec234/spacemacs-org-loaded t)
  #+END_SRC
